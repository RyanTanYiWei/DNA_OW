group_by(`actor_type`) %>%
summarize(actor_sum = n())
top_a <- function(n, var){
return(events %>%
left_join(actor_summary, by = "actor_type") %>%
group_by(actor_type, eval(parse(text = var)), actor_sum) %>%
summarize(count = n()) %>%
arrange(`actor_type`, across(c(count), desc)) %>%
group_by(`actor_type`) %>%
top_n(n, wt = count) %>%
mutate(fraction = count/actor_sum) %>%
ungroup()
)
}
print_top_a_ <- function(n, var){
write.csv(top_a(n, var),paste0("outputs_analysis/top", n,"_actor_", var,".csv"))
}
print_top_a_substorylines(10)
print_top_a(10, "storyline")
print_top_a <- function(n, var){
write.csv(top_a(n, var),paste0("outputs_analysis/top", n,"_actor_", var,".csv"))
}
actor_summary <- events %>%
group_by(`actor_type`) %>%
summarize(actor_sum = n())
top_a <- function(n, var){
return(events %>%
left_join(actor_summary, by = "actor_type") %>%
group_by(actor_type, eval(parse(text = var)), actor_sum) %>%
summarize(count = n()) %>%
arrange(`actor_type`, across(c(count), desc)) %>%
group_by(`actor_type`) %>%
top_n(n, wt = count) %>%
mutate(fraction = count/actor_sum) %>%
ungroup()
)
}
print_top_a <- function(n, var){
write.csv(top_a(n, var),paste0("outputs_analysis/top", n,"_actor_", var,".csv"))
}
print_top_a(10, "storyline")
print_top_a(3, "storyline")
print_top_a(10, "sub_storyline")
print_top_a(3, "sub_storyline")
print_top_a(10, "topic")
print_top_a(10, "issue")
actor_summary <- events %>%
group_by(`actor_type`) %>%
summarize(actor_sum = n())
top_a <- function(n, var){
return(events %>%
left_join(actor_summary, by = "actor_type") %>%
group_by(actor_type, eval(parse(text = var)), actor_sum) %>%
summarize(count = n()) %>%
arrange(`actor_type`, across(c(count), desc)) %>%
group_by(`actor_type`) %>%
top_n(n, wt = count) %>%
mutate(fraction = count/actor_sum) %>%
ungroup()
)
}
print_top_a <- function(n, var){
write.csv(top_a(n, var),paste0("outputs_analysis/top_actor_", n,"_", var,".csv"))
}
print_top_a(10, "storyline")
print_top_a(3, "storyline")
print_top_a(10, "sub_storyline")
print_top_a(3, "sub_storyline")
print_top_a(10, "issue")
yearly_summary <- events %>%
group_by(year) %>%
summarize(year_sum = n())
top_y <- function(n, var){
return(events %>%
left_join(yearly_summary, by = "year") %>%
group_by(year, eval(parse(text = var), year_sum) %>%
summarize(count = n()) %>%
#arrange(desc(year)) %>%
arrange(-year, across(c(count), desc)) %>%
group_by(year) %>%
top_n(3, wt = count) %>%
mutate(fraction = count/year_sum) %>%
ungroup()
)
}
yearly_summary <- events %>%
group_by(year) %>%
summarize(year_sum = n())
top_y <- function(n, var){
return(events %>%
left_join(yearly_summary, by = "year") %>%
group_by(year, eval(parse(text = var)), year_sum) %>%
summarize(count = n()) %>%
#arrange(desc(year)) %>%
arrange(-year, across(c(count), desc)) %>%
group_by(year) %>%
top_n(3, wt = count) %>%
mutate(fraction = count/year_sum) %>%
ungroup()
)
}
print_top_y <- function(n, var){
write.csv(top_y(n, var),paste0("outputs_analysis/top_year_", n,"_", var,".csv"))
}
print_top_y(3, "storyline")
print_top_y(3, "sub_storyline")
print_top_y(10, "issue")
library(ggplot2)
library(dplyr)
library(tidyr)
library(RColorBrewer)
library(gridExtra)
library(readxl)
library(lubridate)
library(vcd)
events <- read_excel("eventlist_11_7.xlsx", sheet = "eventlist")
# create year category
events <- events %>% mutate(year=year(time))
# print column names
colnames(events)
contentlist <- events %>%
distinct(issue, storyline, sub_storyline) %>%
arrange(issue)
# Printing Repeats
contentlist %>%
group_by(sub_storyline) %>%
filter(n() > 1) %>%
ungroup()
# Write Content List
#write.csv(contentlist, "outputs_analysis/contentlist.csv")
#contentlist
#events %>% distinct(issue)
actorlist <- events %>%
distinct(person, organization, `actor_type`) %>%
arrange(person)
# Printing Repeats
actorlist %>%
group_by(person) %>%
filter(n() > 1) %>%
ungroup()
# Write Content List
#write.csv(actorlist, "outputs_analysis/actorlist.csv")
colnames(events)
# Define Chi Square Function
chi_sq_p_value <- function(x, y) {
tbl <- table(x, y)
chi2 <- chisq.test(tbl)
p_value <- chi2$p.value
return(p_value)
}
y_vars <- c("issue", "storyline", "sub_storyline")
x_vars <- c("person", "organization", "actor_type", "year", "document_id", "document_source")
# Initialize an empty matrix
chi_sq_matrix <- matrix(nrow = length(x_vars), ncol = length(y_vars),
dimnames = list(x_vars, y_vars))
# Calculate Chi-Square p-values for each pair and fill the matrix
for (i in 1:length(x_vars)) {
for (j in 1:length(y_vars)) {
chi_sq_matrix[i, j] <- chi_sq_p_value(events[[x_vars[i]]], events[[y_vars[j]]])
}
}
chi_sq_df <- as.data.frame(as.table(chi_sq_matrix))
colnames(chi_sq_df) <- c("X_Variable", "Y_Variable", "p_value")
# plot graph
g4 <- ggplot(chi_sq_df, aes(X_Variable, Y_Variable, fill = p_value)) +
geom_tile() +
geom_text(aes(label = round(p_value, 3)), color = "black") +
scale_fill_gradientn(colors = c("dodgerblue2", "white", "white"), values = c(0, 0.1, 1),
limits = c(0, 1), name = "P-value)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
ggtitle("Test of Association: Content vs Independent Var",
subtitle = "Chi Square Test") +
xlab("Independent Variables") +
ylab("Content Variables")
# save plot
png(paste0("outputs_diagrams/correlation_chisq.png"),
width = 6,
height = 4.5,
units = "in",
pointsize = 4,
res=600)
g4
dev.off()
y = events$issue
#y = events$storyline
#y = events$sub_storyline
x = events$`actor_type`
#x = events$`organization`
#x = events$`year`
#x = events$`document_id`
#x = events$`document_source`
print( chisq.test(table(y, x )))
# Define Cramers V Function
cramers_v <- function(x, y) {
return (assocstats(table(x, y))$cramer)
}
y_vars <- c("issue", "storyline", "sub_storyline")
x_vars <- c("person", "organization", "actor_type", "year", "document_id", "document_source")
# Initialize an empty matrix
cramers_matrix <- matrix(nrow = length(x_vars), ncol = length(y_vars),
dimnames = list(x_vars, y_vars))
# Calculate Cramér's V for each pair and fill the matrix
for (i in 1:length(x_vars)) {
for (j in 1:length(y_vars)) {
c_v = chi_sq_matrix[i, j]
# Fltering ChiSq P Value > 0.05
if (is.na(c_v) || c_v > 0.05) {
#filter
} else {
cramers_matrix[i, j] <- cramers_v(events[[x_vars[i]]], events[[y_vars[j]]])
}
}
}
# Plot Heatmap
cramers_df <- as.data.frame(as.table(cramers_matrix))
colnames(cramers_df) <- c("X_Variable", "Y_Variable", "Cramers_V")
g5 <- ggplot(cramers_df, aes(X_Variable, Y_Variable, fill = Cramers_V)) +
geom_tile() +
geom_text(aes(label = round(Cramers_V, 3)), color = "black") +
scale_fill_gradient2(low="lightblue", high="dodgerblue2",, limit = c(0, 1), guide="colorbar", name = "Cramér's V" ) +
#scale_fill_gradient2(low = "white", high = "red", midpoint = 0, limit = c(0, 1), space = "Lab", name = "Cramér's V") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
ggtitle("Strength of Association: Content vs Independent Var",
subtitle = "Cramer's V") +
xlab("Independent Variables") +
ylab("Content Variables")
# save plot
png(paste0("outputs_diagrams/correlation_cremersv.png"),
width = 6,
height = 4.5,
units = "in",
pointsize = 4,
res=600)
g5
dev.off()
yearly_summary <- events %>%
group_by(year) %>%
summarize(year_sum = n())
top_y <- function(n, var){
return(events %>%
left_join(yearly_summary, by = "year") %>%
group_by(year, eval(parse(text = var)), year_sum) %>%
summarize(count = n()) %>%
#arrange(desc(year)) %>%
arrange(-year, across(c(count), desc)) %>%
group_by(year) %>%
top_n(3, wt = count) %>%
mutate(fraction = count/year_sum) %>%
ungroup()
)
}
print_top_y <- function(n, var){
write.csv(top_y(n, var),paste0("outputs_analysis/top_year_", n,"_", var,".csv"))
}
print_top_y(3, "storyline")
print_top_y(3, "sub_storyline")
print_top_y(10, "issue")
actor_summary <- events %>%
group_by(`actor_type`) %>%
summarize(actor_sum = n())
top_a <- function(n, var){
return(events %>%
left_join(actor_summary, by = "actor_type") %>%
group_by(actor_type, eval(parse(text = var)), actor_sum) %>%
summarize(count = n()) %>%
arrange(`actor_type`, across(c(count), desc)) %>%
group_by(`actor_type`) %>%
top_n(n, wt = count) %>%
mutate(fraction = count/actor_sum) %>%
ungroup()
)
}
print_top_a <- function(n, var){
write.csv(top_a(n, var),paste0("outputs_analysis/top_actor_", n,"_", var,".csv"))
}
print_top_a(10, "storyline")
print_top_a(3, "storyline")
actor_summary <- events %>%
group_by(`actor_type`) %>%
summarize(actor_sum = n())
top_a <- function(n, var){
return(events %>%
left_join(actor_summary, by = "actor_type") %>%
group_by(actor_type, eval(parse(text = var)), actor_sum) %>%
summarize(count = n()) %>%
arrange(`actor_type`, across(c(count), desc)) %>%
group_by(`actor_type`) %>%
top_n(n, wt = count) %>%
mutate(fraction = count/actor_sum) %>%
ungroup()
)
}
print_top_a <- function(n, var){
write.csv(top_a(n, var),paste0("outputs_analysis/top_actor_", n,"_", var,".csv"))
}
print_top_a(10, "storyline")
print_top_a(3, "storyline")
print_top_a(10, "sub_storyline")
print_top_a(3, "sub_storyline")
print_top_a(10, "issue")
library(ggplot2)
library(dplyr)
library(tidyr)
library(RColorBrewer)
library(pals)
library(gridExtra)
library(readxl)
library(lubridate)
library(vcd)
events <- read_excel("eventlist_11_7.xlsx", sheet = "eventlist")
# create year category
events <- events %>% mutate(year=year(time))
# print column names
colnames(events)
actor_summary <- events %>%
group_by(`actor_type`) %>%
summarize(actor_sum = n())
top_a <- function(n, var){
return(events %>%
left_join(actor_summary, by = "actor_type") %>%
group_by(actor_type, eval(parse(text = var)), actor_sum) %>%
summarize(count = n()) %>%
arrange(`actor_type`, across(c(count), desc)) %>%
group_by(`actor_type`) %>%
top_n(n, wt = count) %>%
mutate(fraction = count/actor_sum) %>%
ungroup() %>%
select(actor_type, `eval(parse(text = var))`, count, fraction, actor_sum) %>%
setNames(c("actor_type", var, "count", "fraction", "actor_sum"))
)
}
topactorstorylines <- unique(top_a(3, "storyline")$storyline)
topactorstoryline
topactorstorylines
actor_storyline_proportion
actor_storyline_proportion <- events %>%
filter(storyline %in% topactorstorylines) %>%
mutate(storyline = factor(storyline, levels = rev(topactorstorylines))) %>%
mutate(actor_type = factor(actor_type, levels = rev(at))) %>%
group_by(storyline, actor_type) %>%
summarise(count = n(), .groups = 'drop') %>%
group_by(storyline) %>%
mutate(total = sum(count),
proportion = count / total) %>%
ungroup() %>%
select(storyline, actor_type, proportion)
actor_storyline_proportion
actor_storyline_proportion
actor_storyline_proportion <- events %>%
filter(storyline %in% topactorstorylines) %>%
mutate(storyline = factor(storyline, levels = rev(topactorstorylines))) %>%
mutate(actor_type = factor(actor_type, levels = rev(at))) %>%
group_by(storyline, actor_type) %>%
summarise(count = n(), .groups = 'drop') %>%
group_by(storyline) %>%
mutate(total = sum(count),
proportion = count / total) %>%
ungroup() %>%
select(storyline, actor_type, proportion)
at <- sort(unique(events$actor_type))
actor_storyline_proportion <- events %>%
filter(storyline %in% topactorstorylines) %>%
mutate(storyline = factor(storyline, levels = rev(topactorstorylines))) %>%
mutate(actor_type = factor(actor_type, levels = rev(at))) %>%
group_by(storyline, actor_type) %>%
summarise(count = n(), .groups = 'drop') %>%
group_by(storyline) %>%
mutate(total = sum(count),
proportion = count / total) %>%
ungroup() %>%
select(storyline, actor_type, proportion)
actor_storyline_proportion
actor_type_counts <- actor_storyline_proportion %>%
group_by(storyline) %>%
summarise(actor_type_count = n_distinct(actor_type))
actor_type_counts %>%
arrange(desc(actor_type_count))
actor_storyline_proportion <- events %>%
mutate(storyline = factor(storyline, levels = rev(sorted_storylines$storyline)))
sorted_storylines <- actor_type_counts %>%
arrange(desc(actor_type_count))
actor_storyline_proportion <- events %>%
mutate(storyline = factor(storyline, levels = rev(sorted_storylines$storyline)))
# Plot the horizontal barplot
g7 <- ggplot(actor_storyline_proportion , aes(y = storyline, x = proportion, fill = actor_type)) +
geom_bar(stat = "identity") +
scale_fill_manual(values = actor_type_colors) +
labs(title = "Distribution of Top Storylines by Actor Type",
subtitle = "Top 3 / Actor Type") +
theme_minimal() +
theme(axis.title.x=element_blank(),
axis.title.y=element_blank())+
theme(axis.text.y = element_text(hjust = 1)) +
theme(legend.position = "bottom",
legend.justification = c(1.4, 0), # Align legend to the bottom-left
legend.box.just = "left") + # Align legend text to the left within the box
guides(fill = guide_legend(nrow = 5, title.position = "top", bycol = TRUE, reverse = TRUE))
# Set colors
n_actor_types <- length(unique(events$actor_type))
palette <- cols25(n_actor_types) #alphabet2, cols25, glasbey, polychomre
# Create a named vector for the actor type colors
actor_type_colors <- setNames(palette, unique(actor_storyline_proportion$actor_type))
actor_type_colors
# Plot the horizontal barplot
g7 <- ggplot(actor_storyline_proportion , aes(y = storyline, x = proportion, fill = actor_type)) +
geom_bar(stat = "identity") +
scale_fill_manual(values = actor_type_colors) +
labs(title = "Distribution of Top Storylines by Actor Type",
subtitle = "Top 3 / Actor Type") +
theme_minimal() +
theme(axis.title.x=element_blank(),
axis.title.y=element_blank())+
theme(axis.text.y = element_text(hjust = 1)) +
theme(legend.position = "bottom",
legend.justification = c(1.4, 0), # Align legend to the bottom-left
legend.box.just = "left") + # Align legend text to the left within the box
guides(fill = guide_legend(nrow = 5, title.position = "top", bycol = TRUE, reverse = TRUE))
g7
actor_storyline_proportion <- events %>%
filter(storyline %in% topactorstorylines) %>%
mutate(storyline = factor(storyline, levels = rev(topactorstorylines))) %>%
mutate(actor_type = factor(actor_type, levels = rev(at))) %>%
group_by(storyline, actor_type) %>%
summarise(count = n(), .groups = 'drop') %>%
group_by(storyline) %>%
mutate(total = sum(count),
proportion = count / total) %>%
ungroup() %>%
select(storyline, actor_type, proportion)
# Sort Based on number of actors
actor_type_counts <- actor_storyline_proportion %>%
group_by(storyline) %>%
summarise(actor_type_count = n_distinct(actor_type))
sorted_storylines <- actor_type_counts %>%
arrange(desc(actor_type_count))
actor_storyline_proportion <- events %>%
mutate(storyline = factor(storyline, levels = rev(sorted_storylines$storyline)))
# Plot the horizontal barplot
g7 <- ggplot(actor_storyline_proportion , aes(y = storyline, x = proportion, fill = actor_type)) +
geom_bar(stat = "identity") +
scale_fill_manual(values = actor_type_colors) +
labs(title = "Distribution of Top Storylines by Actor Type",
subtitle = "Top 3 / Actor Type") +
theme_minimal() +
theme(axis.title.x=element_blank(),
axis.title.y=element_blank())+
theme(axis.text.y = element_text(hjust = 1)) +
theme(legend.position = "bottom",
legend.justification = c(1.4, 0), # Align legend to the bottom-left
legend.box.just = "left") + # Align legend text to the left within the box
guides(fill = guide_legend(nrow = 5, title.position = "top", bycol = TRUE, reverse = TRUE))
g7
actor_storyline_proportion
actor_storyline_proportion <- events %>%
filter(storyline %in% topactorstorylines) %>%
mutate(storyline = factor(storyline, levels = rev(topactorstorylines))) %>%
mutate(actor_type = factor(actor_type, levels = rev(at))) %>%
group_by(storyline, actor_type) %>%
summarise(count = n(), .groups = 'drop') %>%
group_by(storyline) %>%
mutate(total = sum(count),
proportion = count / total) %>%
ungroup() %>%
select(storyline, actor_type, proportion)
actor_storyline_proportion
topactorstorylines <- unique(top_a(3, "storyline")$storyline)
at <- sort(unique(events$actor_type))
actor_storyline_proportion <- events %>%
filter(storyline %in% topactorstorylines) %>%
mutate(storyline = factor(storyline, levels = rev(topactorstorylines))) %>%
mutate(actor_type = factor(actor_type, levels = rev(at))) %>%
group_by(storyline, actor_type) %>%
summarise(count = n(), .groups = 'drop') %>%
group_by(storyline) %>%
mutate(total = sum(count),
proportion = count / total) %>%
ungroup() %>%
select(storyline, actor_type, proportion)
# Sort Based on number of actors
actor_type_counts <- actor_storyline_proportion %>%
group_by(storyline) %>%
summarise(actor_type_count = n_distinct(actor_type))
sorted_storylines <- actor_type_counts %>%
arrange(desc(actor_type_count))
actor_storyline_proportion <- actor_storyline_proportion %>%
mutate(storyline = factor(storyline, levels = rev(sorted_storylines$storyline)))
# Plot the horizontal barplot
g7 <- ggplot(actor_storyline_proportion , aes(y = storyline, x = proportion, fill = actor_type)) +
geom_bar(stat = "identity") +
scale_fill_manual(values = actor_type_colors) +
labs(title = "Distribution of Top Storylines by Actor Type",
subtitle = "Top 3 / Actor Type") +
theme_minimal() +
theme(axis.title.x=element_blank(),
axis.title.y=element_blank())+
theme(axis.text.y = element_text(hjust = 1)) +
theme(legend.position = "bottom",
legend.justification = c(1.4, 0), # Align legend to the bottom-left
legend.box.just = "left") + # Align legend text to the left within the box
guides(fill = guide_legend(nrow = 5, title.position = "top", bycol = TRUE, reverse = TRUE))
g7
# Save plot
png(paste0("outputs_diagrams/top3story_vs_actortype.png"),
width = 7,
height = 6,
units = "in",
pointsize = 4,
res=1200)
g7
dev.off()
