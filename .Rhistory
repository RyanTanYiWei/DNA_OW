library(ggplot2)
autoplot.dna_barplot(b, colors = TRUE)
autoplot(b, colors = TRUE)
# edit the colors before plotting
b$Color[b$Type == "NGO"] <- "red"         # change NGO color to red
b$Color[b$Type == "Government"] <- "blue" # change government color to blue
autoplot(b, colors = TRUE)
# use an attribute, such as type, to color the bars
autoplot(b, colors = "Type") +
scale_colour_manual(values = "black")
# replace colors for the three possible actor types with custom colors
autoplot(b, colors = "Type") +
scale_fill_manual(values = c("red", "blue", "green")) +
scale_colour_manual(values = "black")
dna_printDetails()
library(rDNA)
library(rJava)
library(igraph)
library(statnet)
library(ergm)
library(ergm)
library(ggplot2)
set.seed(12345)
dna_openDatabase(db_url = "FirstRun.dna",
coderPasswor = "97863909")
library(rDNA)
library(rJava)
library(igraph)
library(ggplot2)
set.seed(12345)
.jinit()
.jcall("java/lang/System", "S", "getProperty", "java.runtime.version")
library(rDNA)
library(rJava)
library(igraph)
library(ggplot2)
set.seed(12345)
getwd()
dna_init()
dna_openDatabase(db_url = "FirstRun.dna",
coderPasswor = "97863909")
nw <- dna_network(networkType = "onemode",
variable1 = "organization",
variable2 = "concept",
qualifier = "agreement",
qualifierAggregation = "congruence",
normalization = "average",
excludeValues = list("concept" =
c("There should be legislation to regulate emissions.")))
dna_printDetails()
b <- dna_barplot(statementType = "DNA Statement",
variable = "concept",
qualifier = "agreement")
autoplot(b, colors = TRUE)
# edit the colors before plotting
b$Color[b$Type == "NGO"] <- "red"         # change NGO color to red
b$Color[b$Type == "Government"] <- "blue" # change government color to blue
autoplot(b, colors = TRUE)
# use an attribute, such as type, to color the bars
autoplot(b, colors = "Type") +
scale_colour_manual(values = "black")
# replace colors for the three possible actor types with custom colors
autoplot(b, colors = "Type") +
scale_fill_manual(values = c("red", "blue", "green")) +
scale_colour_manual(values = "black")
# edit the colors before plotting
b$Color[b$Type == "NGOs"] <- "red"         # change NGO color to red
b$Color[b$Type == "Government"] <- "blue" # change government color to blue
autoplot(b, colors = TRUE)
getwd()
dna_init()
dna_openDatabase(db_url = "FirstRun.dna",
coderPasswor = "97863909")
nw <- dna_network(networkType = "onemode",
variable1 = "organization",
variable2 = "concept",
qualifier = "agreement",
qualifierAggregation = "congruence",
normalization = "average",
excludeValues = list("concept" =
c("There should be legislation to regulate emissions.")))
typeof(nw)
nw
plot(nw)
plot.igraph(nw)
gplot(nw)
dna_getAttributes()
dna_getAttributes(nw)
network(congruence)
network(nw)
nw <- dna_network(networkType = "onemode",
variable1 = "organization",
variable2 = "concept",
qualifier = "agreement",
qualifierAggregation = "congruence",
normalization = "average")
network(nw)
plot(network(nw))
nw
library(rDNA)
library(rJava)
library(igraph)
library(ggplot2)
set.seed(12345)
install.packages("statnet")
library(statnet)
install.packages("ergm")
library(statnet)
library(statnet)
library(rJava)
.jinit()
.jcall("java/lang/System", "S", "getProperty", "java.runtime.version")
library(rDNA)
library(igraph)
library(ggplot2)
library(statnet)
library(rJava)
.jinit()
.jcall("java/lang/System", "S", "getProperty", "java.runtime.version")
library(rDNA)
library(igraph)
library(ggplot2)
#library(statnet)
set.seed(12345)
plot(nw)
getwd()
dna_init()
dna_openDatabase(db_url = "FirstRun.dna",
coderPasswor = "97863909")
nw <- dna_network(networkType = "onemode",
variable1 = "organization",
variable2 = "concept",
qualifier = "agreement",
qualifierAggregation = "congruence",
normalization = "average")
plot(nw)
igraph.plot(nw)
plot.igraph(nw)
b <- dna_barplot(statementType = "DNA Statement",
variable = "concept",
qualifier = "agreement")
autoplot(b, colors = TRUE)
# edit the colors before plotting
b$Color[b$Type == "NGOs"] <- "red"         # change NGO color to red
b$Color[b$Type == "Government"] <- "blue" # change government color to blue
autoplot(b, colors = TRUE)
# use an attribute, such as type, to color the bars
autoplot(b, colors = "Type") +
scale_colour_manual(values = "black")
# edit the colors before plotting
b$Color[b$Type == "National (Government)"] <- "red"         # change NGO color to red
b$Color[b$Type == "Municipal (Government)"] <- "blue" # change government color to blue
autoplot(b, colors = TRUE)
b
b <- dna_barplot(statementType = "DNA Statement",
variable = "organization",
qualifier = "agreement")
b
autoplot(b, colors = TRUE)
b <- dna_barplot(statementType = "DNA Statement",
variable = organization$type,
qualifier = "agreement")
dna_network(networkType = "twomode",
variable1 = "organization",
variable2 = "concept",
qualifier = "agreement",
qualifierAggregation = "congruence",
normalization = "average")
x <- dna_network(networkType = "twomode",
variable1 = "organization",
variable2 = "concept",
qualifier = "agreement",
qualifierAggregation = "congruence",
normalization = "average")
x
print(x, trim = 5, attr = True)
print(x, trim = 5, attr = TRUE)
as.matrix(x)
plot(as.matrix(x))
nw <- dna_network(networkType = "onemode",
variable1 = "organization",
variable2 = "concept",
qualifier = "agreement",
qualifierAggregation = "congruence",
normalization = "average")
plot.igraph(nw)
as.matrix(nw)
plot.igraph(as.matrix(nw))
plot.igraph(as.matrix(x))
x <- dna_network(networkType = "onemode",
variable1 = "organization",
variable2 = "concept",
qualifier = "agreement",
qualifierAggregation = "congruence",
normalization = "average")
plot.igraph(as.matrix(x))
nw <- dna_network(networkType = "onemode",
variable1 = "organization",
variable2 = "concept",
qualifier = "agreement",
qualifierAggregation = "congruence",
normalization = "average")
variable1 = "organization,
x <- dna_network(networkType = "onemode",
x <- dna_network(networkType = "onemode",
variable1 = "organization",
variable2 = "concept",
qualifier = "agreement",
qualifierAggregation = "congruence",
normalization = "average")
plot.igraph(as.matrix(x))
b <- dna_barplot(statementType = "DNA Statement",
variable = "organization",
qualifier = "agreement")
b <- dna_barplot(statementType = "DNA Statement",
variable = "organization",
qualifier = "agreement",
invertTypes = TRUE)
b
autoplot(b, colors = TRUE)
b <- dna_barplot(statementType = "DNA Statement",
variable = "organization",
qualifier = "agreement",
invertTypes = TRUE)
b
b <- dna_barplot(statementType = "DNA Statement",
variable = "organization",
invertTypes = TRUE,
qualifier = "agreement"
)
b
b <- dna_barplot(statementType = "DNA Statement",
variable = "organization",
#invertTypes = TRUE,
qualifier = "agreement"
)
b
b$Entity = b$Type
b
autoplot(b, colors = TRUE)
b <- dna_barplot(statementType = "DNA Statement",
variable = "organization",
qualifier = "agreement")
autoplot(b, colors = TRUE)
b
library(dyplr)
library(dplyr)
plot.igraph(as.matrix(x))
b <- dna_barplot(statementType = "DNA Statement",
variable = "organization",
qualifier = "agreement")
b %>% group_by(type) %>% summarize(total_value = sum(value))
b
b %>% group_by(Type) %>% summarize(total_value = sum(value))
b %>% group_by("Type") %>% summarize(total_value = sum(value))
b
b %>% group_by("Type") %>% summarize(`0` = sum(`0`), `1` = sum(`1`))
b %>% group_by(Type) %>% summarize(`0` = sum(`0`), `1` = sum(`1`))
b <- dna_barplot(statementType = "DNA Statement",
variable = "organization",
qualifier = "agreement") %>%
group_by(Type) %>%
summarize(`0` = sum(`0`), `1` = sum(`1`))
b
autoplot(b, colors = TRUE)
b
b <- dna_barplot(statementType = "DNA Statement",
variable = "organization",
qualifier = "agreement")
b
b %>% group_by(Type) %>%summarize(`0` = sum(`0`), `1` = sum(`1`))
b
b %>% group_by(Type) %>%summarize(`0` = sum(`0`), `1` = sum(`1`))
b %>% group_by(Type) %>%summarize(`0` = sum(`0`), `1` = sum(`1`)) %>% as.data.frame()
b <- b %>% group_by(Type) %>%summarize(`0` = sum(`0`), `1` = sum(`1`)) %>% as.data.frame()
autoplot(b, colors = TRUE)
autoplot(b)
b <- b %>% group_by(Type) %>%summarize(`0` = sum(`0`), `1` = sum(`1`)) %>% as.data.frame()
b
b <- dna_barplot(statementType = "DNA Statement",
variable = "organization",
qualifier = "agreement")
b
b1 $ Color = "#000000"
b1$Color = "#000000"
b1 <- b %>% group_by(Type) %>%summarize(`0` = sum(`0`), `1` = sum(`1`)) %>% as.data.frame()
b1$Color = "#000000"
autoplot(b)
b <- dna_barplot(statementType = "DNA Statement",
variable = "organization",
qualifier = "agreement")
b
b
b1 <- b %>% group_by(Type) %>% summarize(`0` = sum(`0`), `1` = sum(`1`)) %>% as.data.frame()
b1$Color = "#000000"
b
b1
autoplot(b1)
b <- dna_barplot(statementType = "DNA Statement",
variable = "organization",
qualifier = "agreement")
b
typeof(b)
typeof(b1)
b <- dna_barplot(statementType = "DNA Statement",
variable = "organization",
qualifier = "agreement")
b
print(b)
autoplot(b1)
b1
autoplot(b1, x= "Type" , y= "0")
autoplot(b1, x= "Type" , y= "0")
b1
autoplot1
autoplot(b)
b
b %>% as.data.frame()
b)
b
b1 <- b %>% group_by(Type) %>% summarize(`0` = sum(`0`), `1` = sum(`1`)) %>% as.data.frame() %>% .$Color = "#000000"
b1 <- b %>% group_by(Type) %>% summarize(`0` = sum(`0`), `1` = sum(`1`)) %>% as.data.frame() %>% .$Color = "#000000"
b %>% group_by(Type) %>% summarize(`0` = sum(`0`), `1` = sum(`1`)) %>% as.data.frame() %>% .$Color = "#000000"
b %>% group_by(Type) %>% summarize(`0` = sum(`0`), `1` = sum(`1`)) %>% as.data.frame() #%>% .$Color = "#000000"
b %>% group_by(Type) %>% summarize(`0` = sum(`0`), `1` = sum(`1`)) %>% as.data.frame() %>% $Color = "#000000"
b %>% group_by(Type) %>% summarize(`0` = sum(`0`), `1` = sum(`1`)) %>% as.data.frame() %>% .$Color = "#000000"
b1 <- b %>% group_by(Type) %>% summarize(`0` = sum(`0`), `1` = sum(`1`)) %>% as.data.frame()
b
attr(b1, "Qualifier levels") <- 0, 1
attr(b1, "Variable") <- "organization"
attr(b1, "Qualifier levels") <- `0`, `1`
attr(b1, "Qualifier levels") <- "0, 1"
b1
attr(b1, "Variable") <- "organization"
b1
print_with_metadata(b1)
b <- dna_barplot(statementType = "DNA Statement",
variable = "organization",
qualifier = "agreement")
print(b)
b
b <- dna_barplot(statementType = "DNA Statement",
variable = "organization",
qualifier = "agreement",
invertTypes = FALSE)
b
b
print(b)
b
b <- dna_barplot(statementType = "DNA Statement",
variable = "organization",
qualifier = "agreement",
invertTypes = TRUE)
print(b)
b <- dna_barplot(statementType = "DNA Statement",
variable = "organization",
#qualifier = "agreement",
invertTypes = TRUE)
autoplot(b)
autoplot(b)
b <- dna_barplot(statementType = "DNA Statement",
variable = "organization",
#qualifier = "agreement",
invertTypes = TRUE)
b <- dna_barplot(statementType = "DNA Statement",
variable = "organization",
qualifier = "NULL",
invertTypes = TRUE)
b
autoplot(b)
autoplot(b)
b <- dna_barplot(statementType = "DNA Statement",
variable = "organization",
qualifier = "NULL",
invertTypes = TRUE)
autoplot(b)
autoplot(b)
b1 <- b %>% group_by(Type) %>% summarize(`0` = sum(`0`), `1` = sum(`1`)) %>% as.data.frame()
b <- dna_barplot(statementType = "DNA Statement",
variable = "organization",
qualifier = "NULL",
invertTypes = TRUE)
b1 <- b %>% group_by(Type) %>% summarize(`0` = sum(`0`), `1` = sum(`1`)) %>% as.data.frame()
b <- dna_barplot(statementType = "DNA Statement",
variable = "organization",
invertTypes = TRUE)
b1 <- b %>% group_by(Type) %>% summarize(`0` = sum(`0`), `1` = sum(`1`)) %>% as.data.frame()
b1
autoplot(b1)
b2 <- transform(b1, qualifier_numeric = ifelse(qualifier == 0, -1, 1))
b1
b1 <- b %>% group_by(Type) %>% summarize(`0` = sum(`0`), `1` = sum(`1`)) %>% as.data.frame() %>%
pivot_longer(cols = c(`0`, `1`), names_to = "Qualifier", values_to = "Count") %>%
mutate(Qualifier = factor(Qualifier, labels = c("0", "1")))  # Convert to factor for labeling
b
b1 <- b %>% group_by(Type) %>% summarize(`0` = sum(`0`), `1` = sum(`1`)) %>% as.data.frame() %>%
pivot_longer(cols = c(`0`, `1`), names_to = "Qualifier", values_to = "Count") %>%
mutate(Qualifier = factor(Qualifier, labels = c("0", "1")))  # Convert to factor for labeling
b
b1 <- b %>% group_by(Type) %>% summarize(`0` = sum(`0`), `1` = sum(`1`)) %>% as.data.frame()
b1
b
b1 <- b %>% group_by(Type) %>% summarize(`0` = sum(`0`), `1` = sum(`1`)) %>% as.data.frame() %>% rename(Type = Entity)
b1 <- b %>% group_by(Type) %>% summarize(`0` = sum(`0`), `1` = sum(`1`)) %>% as.data.frame() %>% rename("Type"" = "Entity")
b1 <- b %>% group_by(Type) %>% summarize(`0` = sum(`0`), `1` = sum(`1`)) %>% as.data.frame() %>% rename("Type" = "Entity")
b <- dna_barplot(statementType = "DNA Statement",
variable = "organization",
invertTypes = TRUE)
b %>% group_by(Type) %>% summarize(`0` = sum(`0`), `1` = sum(`1`)) %>% as.data.frame() %>% rename("Type" = "Entity")
b
b %>% group_by(Type) %>% summarize(`0` = sum(`0`), `1` = sum(`1`)) %>% as.data.frame()
%>% rename("Entity" = "Type")
b %>% group_by(Type) %>% summarize(`0` = sum(`0`), `1` = sum(`1`)) %>% as.data.frame() %>% rename("Entity" = "Type")
b1 <- b %>% group_by(Type) %>% summarize(`0` = sum(`0`), `1` = sum(`1`)) %>% as.data.frame() %>% rename("Entity" = "Type")
autoplot(b1)
b1 <- b %>% group_by(Type) %>% summarize(`0` = sum(`0`), `1` = sum(`1`)) %>% as.data.frame() %>% rename("Entity" = "Type")
autoplot(b1)
autoplot(b)
class(b)
class(b1)
class(b)
class(b) = c("dna_barplot","data.frame")
class(b)
class(b1) = c("dna_barplot","data.frame")
autoplot(b1)
b1 <- b %>% group_by(Type) %>% summarize(`0` = sum(`0`), `1` = sum(`1`)) %>% as.data.frame() %>% rename("Entity" = "Type")
autoplot(b1)
b1 <- b %>% group_by(Type) %>% summarize(`0` = sum(`0`), `1` = sum(`1`)) %>% as.data.frame()
class(b1) = c("dna_barplot","data.frame")
autoplot(b1)
b1 <- b %>% group_by(Type) %>% summarize(`0` = sum(`0`), `1` = sum(`1`)) %>% as.data.frame() %>% rename("Entity" = "Type")
b1
class(b1) = c("dna_barplot","data.frame")
b1
class(b1) = class(b)
b1
b1 <- b %>% group_by(Type) %>% summarize(`0` = sum(`0`), `1` = sum(`1`)) %>% as.data.frame() %>% rename("Entity" = "Type")
b1
class(b1) = class(b)
b1
b <- dna_barplot(statementType = "DNA Statement",
variable = "organization",
invertTypes = TRUE)
b <- dna_barplot(statementType = "DNA Statement",
variable = "organization")
b
b1 <- b %>% group_by(Type) %>% summarize(`0` = sum(`0`), `1` = sum(`1`)) %>% as.data.frame() %>% rename("Entity" = "Type")
b1
class(b)
class(b1) <- class(b)
autoplot(b1)
b <- dna_barplot(statementType = "DNA Statement",
variable = "organization")
b
class(b)
plot.igraph(as.matrix(nw))
ggplot(df_long, aes(x = Type, y = Count, fill = factor(Qualifier))) +
geom_bar(stat = "identity", position = "identity") +
scale_fill_manual(values = c("blue", "red")) +  # Custom colors for Qualifier 0 and 1
labs(x = "Type", y = "Count", fill = "Qualifier",
title = "Diverging Barplot") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))  # Rotate x-axis labels for better readability
ggplot(b1, aes(x = Type, y = Count, fill = factor(Qualifier))) +
geom_bar(stat = "identity", position = "identity") +
scale_fill_manual(values = c("blue", "red")) +  # Custom colors for Qualifier 0 and 1
labs(x = "Type", y = "Count", fill = "Qualifier",
title = "Diverging Barplot") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))  # Rotate x-axis labels for better readability
library(tidyr)
library(rJava)
.jinit()
.jcall("java/lang/System", "S", "getProperty", "java.runtime.version")
library(rDNA)
library(igraph)
library(ggplot2)
library(dplyr)
library(tidyr)
library(tidyr)
library(tidyr)
update.packages(ask = FALSE)
library(rlang)
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
library(tidyr)
install.packages("rlang")
library(tidyr)
library(rlang)
library(tidyr)
update.packages(ask = FALSE)
library(tidyr)
library(tidyr)
remove.packages("rlang")
install.packages("rlang")
library(rJava)
.jinit()
.jcall("java/lang/System", "S", "getProperty", "java.runtime.version")
library(rDNA)
install.packages("ergm")
install.packages("statnet")
install.packages("ergm")
install.packages("xergm")
install.packages("igraph")
install.packages("cluster")
install.packages("rJava")
install.packages("remotes")
# install.packages("remotes")
remotes::install_github("leifeld/dna/rDNA/rDNA@*release",
INSTALL_opts = "--no-multiarch")
