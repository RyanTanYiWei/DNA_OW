library(rDNA)
library(igraph)
library(ggplot2)
library(dplyr)
library(tidyr)
library(tidyr)
library(tidyr)
update.packages(ask = FALSE)
library(rlang)
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
library(tidyr)
install.packages("rlang")
library(tidyr)
library(rlang)
library(tidyr)
update.packages(ask = FALSE)
library(tidyr)
library(tidyr)
remove.packages("rlang")
install.packages("rlang")
library(rJava)
.jinit()
.jcall("java/lang/System", "S", "getProperty", "java.runtime.version")
library(rDNA)
install.packages("ergm")
install.packages("statnet")
install.packages("ergm")
install.packages("xergm")
install.packages("igraph")
install.packages("cluster")
install.packages("rJava")
install.packages("remotes")
# install.packages("remotes")
remotes::install_github("leifeld/dna/rDNA/rDNA@*release",
INSTALL_opts = "--no-multiarch")
install.packages("vcd")
library(vcd)
events <- read_excel("eventlist_11_7.xlsx", sheet = "eventlist")
library(ggplot2)
library(dplyr)
library(tidyr)
library(RColorBrewer)
library(gridExtra)
library(readxl)
library(lubridate)
library(vcd)
events
events <- read_excel("eventlist_11_7.xlsx", sheet = "eventlist")
events
library(ggplot2)
library(dplyr)
library(tidyr)
library(RColorBrewer)
library(gridExtra)
library(readxl)
library(lubridate)
library(vcd)
events <- read_excel("eventlist_11_7.xlsx", sheet = "eventlist")
events
yearly_summary <- events %>%
mutate(year=year(time)) %>%
group_by(year) %>%
summarize(year_sum = n())
top_y_substorylines <- events %>%
mutate(year=year(time)) %>%
left_join(yearly_summary, by = "year") %>%
group_by(year, Substoryline, year_sum) %>%
summarize(count = n()) %>%
#arrange(desc(year)) %>%
arrange(-year, across(c(count), desc)) %>%
group_by(year) %>%
top_n(3, wt = count) %>%
mutate(fraction = count/year_sum) %>%
ungroup()
top_substorylines
top_y_substorylines
write.csv(top_y_substorylines,"outputs_analysis/top_year_substorylines.csv")
top_y_storylines
top_y_storylines <- events %>%
mutate(year=year(time)) %>%
left_join(yearly_summary, by = "year") %>%
group_by(year, Storyline, year_sum) %>%
summarize(count = n()) %>%
#arrange(desc(year)) %>%
arrange(-year, across(c(count), desc)) %>%
group_by(year) %>%
top_n(3, wt = count) %>%
mutate(fraction = count/year_sum) %>%
ungroup()
top_y_storylines
write.csv(top_y_storylines,"analysis/top_year_storylines.csv")
top_y_storylines <- events %>%
mutate(year=year(time)) %>%
left_join(yearly_summary, by = "year") %>%
group_by(year, Storyline, year_sum) %>%
summarize(count = n()) %>%
#arrange(desc(year)) %>%
arrange(-year, across(c(count), desc)) %>%
group_by(year) %>%
top_n(3, wt = count) %>%
mutate(fraction = count/year_sum) %>%
ungroup()
top_y_storylines
write.csv(top_y_storylines,"outputs_analysis/top_year_storylines.csv")
##correct this to by actor type.
actor_summary <- events %>%
group_by(`Actor Type`) %>%
summarize(actor_sum = n())
top_a_substorylines <- events %>%
mutate(year=year(time)) %>%
left_join(actor_summary, by = "year") %>%
group_by(year, Substoryline, actor_sum) %>%
summarize(count = n()) %>%
#arrange(desc(year)) %>%
arrange(count) %>%
group_by(`Actor Type`) %>%
top_n(10, wt = count) %>%
mutate(fraction = count/actor_sum) %>%
ungroup()
##correct this to by actor type.
actor_summary <- events %>%
group_by(`Actor Type`) %>%
summarize(actor_sum = n())
top_a_substorylines <- events %>%
mutate(year=year(time)) %>%
left_join(actor_summary, by = "year") %>%
group_by(year, Substoryline, actor_sum) %>%
summarize(count = n()) %>%
#arrange(desc(year)) %>%
arrange(count) %>%
group_by(`Actor Type`) %>%
top_n(10, wt = count) %>%
mutate(fraction = count/actor_sum) %>%
ungroup()
actor_summary
top_a_substorylines <- events %>%
left_join(actor_summary, by = "Actor Type") %>%
group_by(Substoryline, actor_sum) %>%
summarize(count = n()) %>%
#arrange(desc(year)) %>%
arrange(count) %>%
group_by(`Actor Type`) %>%
top_n(10, wt = count) %>%
mutate(fraction = count/actor_sum) %>%
ungroup()
top_a_substorylines <- events %>%
left_join(actor_summary, by = "Actor Type") %>%
group_by(Substoryline, actor_sum) %>%
summarize(count = n()) %>%
#arrange(desc(year)) %>%
arrange(count) %>%
group_by(`Actor Type`) %>%
top_n(10, wt = count) %>%
mutate(fraction = count/actor_sum) %>%
ungroup()
top_a_substorylines <- events %>%
left_join(actor_summary, by = "Actor Type") %>%
group_by(Substoryline, actor_sum) %>%
summarize(count = n()) %>%
#arrange(desc(year)) %>%
arrange(count) %>%
#group_by(`Actor Type`) %>%
#top_n(10, wt = count) %>%
#mutate(fraction = count/actor_sum) %>%
#ungroup()
#top_substorylines
#write.csv(top_a_substorylines,"outputs_analysis/top_actor_substorylines.csv")
```
top_a_substorylines <- events %>%
left_join(actor_summary, by = "Actor Type") %>%
group_by(Substoryline, actor_sum) %>%
summarize(count = n()) %>%
#arrange(desc(year)) %>%
arrange(count) #%>%
#top_a_substorylines <-
events %>%
left_join(actor_summary, by = "Actor Type") %>%
group_by(Substoryline, actor_sum) %>%
summarize(count = n()) %>%
#arrange(desc(year)) %>%
arrange(count) #%>%
#top_a_substorylines <-
events %>%
left_join(actor_summary, by = "Actor Type") %>%
group_by(`Actor Type`, Substoryline, actor_sum) %>%
summarize(count = n()) %>%
#arrange(desc(year)) %>%
arrange(count) #%>%
group_by(`Actor Type`) %>%
top_n(10, wt = count) %>%
mutate(fraction = count/actor_sum) %>%
ungroup()
top_a_substorylines <-
events %>%
left_join(actor_summary, by = "Actor Type") %>%
group_by(`Actor Type`, Substoryline, actor_sum) %>%
summarize(count = n()) %>%
arrange(count) %>%
group_by(`Actor Type`) %>%
top_n(10, wt = count) %>%
mutate(fraction = count/actor_sum) %>%
ungroup()
top_a_substorylines
top_a_substorylines <-
events %>%
left_join(actor_summary, by = "Actor Type") %>%
group_by(`Actor Type`, Substoryline, actor_sum) %>%
summarize(count = n()) %>%
arrange(`Actor Type`, across(c(count), desc)) %>%
group_by(`Actor Type`) %>%
top_n(10, wt = count) %>%
mutate(fraction = count/actor_sum) %>%
ungroup()
top_a_substorylines
top_a_storylines <-
events %>%
left_join(actor_summary, by = "Actor Type") %>%
group_by(`Actor Type`, Storyline, actor_sum) %>%
summarize(count = n()) %>%
arrange(`Actor Type`, across(c(count), desc)) %>%
group_by(`Actor Type`) %>%
top_n(10, wt = count) %>%
mutate(fraction = count/actor_sum) %>%
ungroup()
top_a_storylines
write.csv(top_a_storylines,"outputs_analysis/top_actor_storylines.csv")
actor_summary <- events %>%
group_by(`Actor Type`) %>%
summarize(actor_sum = n())
top_a_substorylines <-
events %>%
left_join(actor_summary, by = "Actor Type") %>%
group_by(`Actor Type`, Substoryline, actor_sum) %>%
summarize(count = n()) %>%
arrange(`Actor Type`, across(c(count), desc)) %>%
group_by(`Actor Type`) %>%
top_n(10, wt = count) %>%
mutate(fraction = count/actor_sum) %>%
ungroup()
top_a_substorylines
write.csv(top_a_substorylines,"outputs_analysis/top_actor_substorylines.csv")
print(csq_storyline_actortype)
# Chi-Square Test for storyline vs actor
csq_storyline_actortype <- chisq.test(table(events$storyline, events$`Actor Type`))
# Chi-Square Test for storyline vs actor
csq_storyline_actortype <- chisq.test(table(events$storyline, events$`Actor Type`))
# Chi-Square Test for storyline vs actor
csq_storyline_actortype <- chisq.test(table(events$storyline, events$`Actor Type`))
len(events$storyline)
length(events$storyline)
# Chi-Square Test for storyline vs actor
csq_storyline_actortype <- chisq.test(table(events$Storyline, events$`Actor Type`))
print(csq_storyline_actortype)
# Chi-Square Test for storyline vs actor
csq_storyline_actortype <- chisq.test(table(events$Storyline, events$`Source`))
columns(events)
column(events)
col(events)
colnames(events)
# Chi-Square Test for storyline vs actor
csq_storyline_actortype <- chisq.test(table(events$Storyline, events$`Actor Type`))
print(csq_storyline_actortype)
csq_storyline_actortype <- chisq.test(table(events$substoryline, events$`Actor Type`))
print(csq_storyline_actortype)
# Chi-Square Test for storyline vs actor
csq_story_actortype <- chisq.test(table(events$Storyline, events$`Actor Type`))
print(csq_storyline_actortype)
csq_substory_actortype <- chisq.test(table(events$Substoryline, events$`Actor Type`))
print(csq_substory_actortype)
cramers_substory_actortype <- assocstats(table(events$Substoryline, events$`Actor Type`))$cramer
print(cramers_substory_actortype)
csq_substory_actortype <- chisq.test(table(events$Substoryline, events$`Topic`))
print(csq_substory_actortype)
csq_story_actortype <- chisq.test(table(events$Storyline, events$`Actor Type`))
print(csq_storyline_actortype)
chisq.test(table(events$Topic, events$`Actor Type`))
colnames(events)
chisq.test(table(events$Topic, events$`document_source`))
chisq.test(table(events$Topic, events$`time`))
chisq.test(table(events$Topic, events$`organization`))
print( chisq.test(table(events$Topic, events$`ActorType`)) )
print( chisq.test(table(events$Topic, events$`ActorType`)) )
print( chisq.test(table(events$Topic, events$`Actor Type`)) )
print( chisq.test(table(events$Topic, events$`organization`)) )
print( chisq.test(table(events$Topic, events$`document_id`)) )
print( chisq.test(table(events$Topic, events$`document_source`)) )
print( assocstats(table(events$Topic, events$`Actor Type`))$cramer )
print( assocstats(table(events$Substoryline, events$`Actor Type`))$cramer )
print( assocstats(table(events$Storyline, events$`Actor Type`))$cramer )
print( assocstats(table(events$Storyline, events$`organization`))$cramer )
cramers_v <- function(x, y) {
return (assocstats(table(x, y))$cramer)
}
x_vars <- c("Topic", "Substorylines", "Storylines")
y_vars <- c("Actor_Type", "organization", "document_id", "document_source")
# Initialize an empty matrix
cramers_matrix <- matrix(nrow = length(x_vars), ncol = length(y_vars),
dimnames = list(x_vars, y_vars))
# Calculate CramÃ©r's V for each pair and fill the matrix
for (i in 1:length(x_vars)) {
for (j in 1:length(y_vars)) {
cramers_matrix[i, j] <- cramers_v(events[[x_vars[i]]], events[[y_vars[j]]])
}
}
events[[x_vars[0]]
events[[x_vars[1]]
events[[x_vars[1]]]
events[[y_vars[1]]]
cramers_v <- function(x, y) {
return (assocstats(table(x, y))$cramer)
}
x_vars <- c("Topic", "Substorylines", "Storylines")
y_vars <- c("Actor Type", "organization", "document_id", "document_source")
# Initialize an empty matrix
cramers_matrix <- matrix(nrow = length(x_vars), ncol = length(y_vars),
dimnames = list(x_vars, y_vars))
# Calculate CramÃ©r's V for each pair and fill the matrix
for (i in 1:length(x_vars)) {
for (j in 1:length(y_vars)) {
cramers_matrix[i, j] <- cramers_v(events[[x_vars[i]]], events[[y_vars[j]]])
}
}
events[[y_vars[1]]]
cramers_v <- function(x, y) {
return (assocstats(table(x, y))$cramer)
}
x_vars <- c("Topic", "Substorylines", "Storylines")
y_vars <- c("Actor Type", "organization", "document_id", "document_source")
# Initialize an empty matrix
cramers_matrix <- matrix(nrow = length(x_vars), ncol = length(y_vars),
dimnames = list(x_vars, y_vars))
# Calculate CramÃ©r's V for each pair and fill the matrix
for (i in 1:length(x_vars)) {
for (j in 1:length(y_vars)) {
cramers_matrix[i, j] <- cramers_v(events[[x_vars[i]]], events[[y_vars[j]]])
}
}
events[[y_vars[2]]]
length(events[[y_vars[2]]])
length(events[[y_vars[3]]])
length(events[[y_vars[2]]])
length(events[[y_vars[1]]])
length(events[[y_vars[0]]])
length(events[[x_vars[1]]])
length(events[[x_vars[2]]])
cramers_v <- function(x, y) {
return (assocstats(table(x, y))$cramer)
}
x_vars <- c("Topic", "Substoryline", "Storyline")
y_vars <- c("Actor Type", "organization", "document_id", "document_source")
# Initialize an empty matrix
cramers_matrix <- matrix(nrow = length(x_vars), ncol = length(y_vars),
dimnames = list(x_vars, y_vars))
# Calculate CramÃ©r's V for each pair and fill the matrix
for (i in 1:length(x_vars)) {
for (j in 1:length(y_vars)) {
cramers_matrix[i, j] <- cramers_v(events[[x_vars[i]]], events[[y_vars[j]]])
}
}
length(events[[x_vars[2]]])
cramers_df <- as.data.frame(as.table(cramers_matrix))
colnames(cramers_df) <- c("X_Variable", "Y_Variable", "Cramers_V")
ggplot(cramers_df, aes(X_Variable, Y_Variable, fill = Cramers_V)) +
geom_tile() +
scale_fill_gradient2(low = "white", high = "red", midpoint = 0.5, limit = c(0, 1), space = "Lab",
name = "CramÃ©r's V") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
ggtitle("Heatmap of CramÃ©r's V between Categorical Variables") +
xlab("X Variables") +
ylab("Y Variables")
print( assocstats(table(events$Substoryline, events$`Actor Type`))$cramer )
print( assocstats(table(events$Topic, events$`Actor Type`))$cramer )
cramers_v <- function(x, y) {
return (assocstats(table(x, y))$cramer)
}
x_vars <- c("Topic", "Substoryline", "Storyline")
y_vars <- c("Actor Type", "organization", "document_id", "document_source")
# Initialize an empty matrix
cramers_matrix <- matrix(nrow = length(x_vars), ncol = length(y_vars),
dimnames = list(x_vars, y_vars))
# Calculate CramÃ©r's V for each pair and fill the matrix
for (i in 1:length(x_vars)) {
for (j in 1:length(y_vars)) {
cramers_matrix[i, j] <- cramers_v(events[[x_vars[i]]], events[[y_vars[j]]])
}
}
length(events[[x_vars[2]]])
cramers_df <- as.data.frame(as.table(cramers_matrix))
colnames(cramers_df) <- c("X_Variable", "Y_Variable", "Cramers_V")
ggplot(cramers_df, aes(X_Variable, Y_Variable, fill = Cramers_V)) +
geom_tile() +
scale_fill_gradient2(low = "white", high = "red", midpoint = 0, limit = c(0, 1), space = "Lab",
name = "CramÃ©r's V") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
ggtitle("Heatmap of CramÃ©r's V between Categorical Variables") +
xlab("X Variables") +
ylab("Y Variables")
ggplot(cramers_df, aes(X_Variable, Y_Variable, fill = Cramers_V)) +
geom_tile() +
scale_fill_gradient2(low="white", high="darkred", guide="colorbar")+
#scale_fill_gradient2(low = "white", high = "red", midpoint = 0, limit = c(0, 1), space = "Lab",
name = "CramÃ©r's V") +
ggplot(cramers_df, aes(X_Variable, Y_Variable, fill = Cramers_V)) +
geom_tile() +
scale_fill_gradient2(low="white", high="darkred", guide="colorbar", name = "CramÃ©r's V") +
#scale_fill_gradient2(low = "white", high = "red", midpoint = 0, limit = c(0, 1), space = "Lab", name = "CramÃ©r's V") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
ggtitle("Heatmap of CramÃ©r's V between Categorical Variables") +
xlab("X Variables") +
ylab("Y Variables")
ggplot(cramers_df, aes(X_Variable, Y_Variable, fill = Cramers_V)) +
geom_tile() +
scale_fill_gradient2(low="white", high="darkred", limit = c(0, 1), guide="colorbar", name = "CramÃ©r's V") +
#scale_fill_gradient2(low = "white", high = "red", midpoint = 0, limit = c(0, 1), space = "Lab", name = "CramÃ©r's V") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
ggtitle("Heatmap of CramÃ©r's V between Categorical Variables") +
xlab("X Variables") +
ylab("Y Variables")
cramers_v <- function(x, y) {
return (assocstats(table(x, y))$cramer)
}
y_vars <- c("Topic", "Substoryline", "Storyline")
x_vars <- c("Actor Type", "organization", "document_id", "document_source")
# Initialize an empty matrix
cramers_matrix <- matrix(nrow = length(x_vars), ncol = length(y_vars),
dimnames = list(x_vars, y_vars))
# Calculate CramÃ©r's V for each pair and fill the matrix
for (i in 1:length(x_vars)) {
for (j in 1:length(y_vars)) {
cramers_matrix[i, j] <- cramers_v(events[[x_vars[i]]], events[[y_vars[j]]])
}
}
length(events[[x_vars[2]]])
cramers_df <- as.data.frame(as.table(cramers_matrix))
colnames(cramers_df) <- c("X_Variable", "Y_Variable", "Cramers_V")
ggplot(cramers_df, aes(X_Variable, Y_Variable, fill = Cramers_V)) +
geom_tile() +
scale_fill_gradient2(low="#86ebc9", high="#09855c",, limit = c(0, 1), guide="colorbar", name = "CramÃ©r's V") +
#scale_fill_gradient2(low = "white", high = "red", midpoint = 0, limit = c(0, 1), space = "Lab", name = "CramÃ©r's V") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
ggtitle("Heatmap of CramÃ©r's V between Categorical Variables") +
xlab("X Variables") +
ylab("Y Variables")
cramers_v <- function(x, y) {
return (assocstats(table(x, y))$cramer)
}
y_vars <- c("Topic", "Storyline", "Substoryline")
x_vars <- c("Actor Type", "organization", "document_id", "document_source")
# Initialize an empty matrix
cramers_matrix <- matrix(nrow = length(x_vars), ncol = length(y_vars),
dimnames = list(x_vars, y_vars))
# Calculate CramÃ©r's V for each pair and fill the matrix
for (i in 1:length(x_vars)) {
for (j in 1:length(y_vars)) {
cramers_matrix[i, j] <- cramers_v(events[[x_vars[i]]], events[[y_vars[j]]])
}
}
length(events[[x_vars[2]]])
cramers_df <- as.data.frame(as.table(cramers_matrix))
colnames(cramers_df) <- c("X_Variable", "Y_Variable", "Cramers_V")
ggplot(cramers_df, aes(X_Variable, Y_Variable, fill = Cramers_V)) +
geom_tile() +
scale_fill_gradient2(low="#86ebc9", high="#09855c",, limit = c(0, 1), guide="colorbar", name = "CramÃ©r's V") +
#scale_fill_gradient2(low = "white", high = "red", midpoint = 0, limit = c(0, 1), space = "Lab", name = "CramÃ©r's V") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
ggtitle("Heatmap of CramÃ©r's V between Categorical Variables") +
xlab("X Variables") +
ylab("Y Variables")
ggplot(cramers_df, aes(X_Variable, Y_Variable, fill = Cramers_V)) +
geom_tile() +
scale_fill_gradient2(low="#86ebc9", high="darkgreen",, limit = c(0, 1), guide="colorbar", name = "CramÃ©r's V") +
#scale_fill_gradient2(low = "white", high = "red", midpoint = 0, limit = c(0, 1), space = "Lab", name = "CramÃ©r's V") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
ggtitle("Heatmap of CramÃ©r's V between Categorical Variables") +
xlab("X Variables") +
ylab("Y Variables")
chi_sq_p_value <- function(x, y) {
tbl <- table(x, y)
chi2 <- chisq.test(tbl)
p_value <- chi2$p.value
return(p_value)
}
# Initialize an empty matrix
chi_sq_matrix <- matrix(nrow = length(x_vars), ncol = length(y_vars),
dimnames = list(x_vars, y_vars))
# Calculate Chi-Square p-values for each pair and fill the matrix
for (i in 1:length(x_vars)) {
for (j in 1:length(y_vars)) {
chi_sq_matrix[i, j] <- chi_sq_p_value(events[[x_vars[i]]], events[[y_vars[j]]])
}
}
chi_sq_df <- as.data.frame(as.table(chi_sq_matrix))
colnames(chi_sq_df) <- c("X_Variable", "Y_Variable", "p_value")
ggplot(chi_sq_df, aes(X_Variable, Y_Variable, fill = p_value)) +
geom_tile() +
scale_fill_gradientn(colors = c("red", "white", "green"), values = c(0, 0.05, 1),
limits = c(0, 1), name = "p-value") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
ggtitle("Heatmap of Chi-Square Test p-values between Categorical Variables") +
xlab("X Variables") +
ylab("Y Variables")
